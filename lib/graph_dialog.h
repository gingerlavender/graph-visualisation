/*!
 * \file
 * Файл с диалоговыми функциями для работы с графом
*/
#ifndef GRAPH_DIALOG
#define GRAPH_DIALOG
/*! Минимальное число при выборе опции в меню */
#define CHOICE_MIN 1
/*! Максимальное число при выборе опции в меню */
#define CHOICE_MAX 5

#include "graph.h"

/*! Опции, доступные в меню */
enum Choices {
	ADD_VERTEX = 1, 
    /**< Добавить вершины */
	ADD_EDGE, 
    /**< Добавить ребро */
	PRINT_ADJ, 
    /**< Напечатать списки смежности */
	VISUALISE, 
    /**< Визуализировать граф без указания пути */
    VISUALISE_PATH 
    /**< Визуализировать граф и какой-либо путь в нём */
};

/*!
 * Напечатать пользовательское меню
*/ 
void print_menu(void);

/*!
 * Диалоговая функция для визуализация графа. Пользователь сам выбирает, подсветить путь или нет
 * \param graph Граф
 * \throw std::bad_alloc В случае ошибки выделения памяти
 * \throw std::runtime_error В случае несуществования пути, конца файла или проблем с потоком ввода
*/ 
void visualise_dialog(graph_t& graph);

/*!
 * Диалоговая функция для добавления ребра.
 * \param graph Граф
 * \throw std::bad_alloc В случае ошибки выделения памяти
 * \throw std::runtime_error Если пользователь пытается создать уже существующее ребро или ребро для вершины, которой нет в графе, в случае конца файла и проблем с потоком ввода
*/ 
void add_edge_dialog(graph_t& graph);

/*!
 * Диалоговая функция для добавления вершин.
 * \param graph Граф
 * \throw std::bad_alloc В случае ошибки выделения памяти
 * \throw std::runtime_error В случае конца файла или проблем с потоком ввода
*/ 
void add_vertex_dialog(graph_t& graph);

/*!
 * Функция, которая печатает списки смежности для вершин графа.
 * \param graph Граф
*/
void print_adjacency(graph_t& graph);

#endif
